package com.iti.jet.gp.etbo5ly.model.pojo;
// Generated May 20, 2016 12:10:15 AM by Hibernate Tools 3.6.0

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.hibernate.validator.constraints.Email;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "etbo5ly"
)
@Inheritance(strategy = InheritanceType.JOINED)
public class User implements java.io.Serializable {

    private Integer id;
    private Region region;
//    @NotNull
//    @Size(min=6 ,max=15)
    private String name;
//    @NotNull
//    @Email
    private String email;
//    @NotNull
//    @Pattern(regexp = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20})")
    // This regex means that the password must contain one digit from one to 9 and must conatin lowercase characters
    // and uppercase characters and it's min lenght is 6 and max is 20
    private String password;
    private Boolean enabled;
    private byte[] image;
    private Date registerationDate;
//    @NotNull
//    @Pattern(regexp = "\\d{11}") // this regex allows only digits
    private String phone;
//    @NotNull
    private String address;
    private Double longitude;
    private Double latitude;
    private String imageURL;

    @JsonIgnore
    private Set<Role> roles = new HashSet<Role>(0);
    @JsonIgnore
    private Set<Order> ordersForCookId = new HashSet<Order>(0);
    @JsonIgnore
    private Set<Order> ordersForCustomerId = new HashSet<Order>(0);

    public User() {
    }

    public User(Region region, String name, String email, String password, String phone, String address) {
        this.region = region;
        this.name = name;
        this.email = email;
        this.password = password;
        this.phone = phone;
        this.address = address;
    }

    public User(Region region, String name, String email, String password, Boolean enabled, byte[] image, Date registerationDate, String phone, String address, Double longitude, Double latitude, Set<Role> roles, Set<Order> ordersForCookId, Set<Order> ordersForCustomerId) {
        this.region = region;
        this.name = name;
        this.email = email;
        this.password = password;
        this.enabled = enabled;
        this.image = image;
        this.registerationDate = registerationDate;
        this.phone = phone;
        this.address = address;
        this.longitude = longitude;
        this.latitude = latitude;
        this.roles = roles;
        this.ordersForCookId = ordersForCookId;
        this.ordersForCustomerId = ordersForCustomerId;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "region_id", nullable = false)
    public Region getRegion() {
        return this.region;
    }

    public void setRegion(Region region) {
        this.region = region;
    }

    @Column(name = "name", nullable = false, length = 45)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name = "image_url")
    public String getImageURL() {
        return this.imageURL;
    }

    public void setImageURL(String imageUrl) {
        this.imageURL = imageUrl;
    }

    @Column(name = "email", nullable = false, length = 45,unique = true)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "password", nullable = false, length = 45)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "enabled")
    public Boolean getEnabled() {
        return this.enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @Column(name = "image")
    public byte[] getImage() {
        return this.image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "registeration_date", length = 19)
    public Date getRegisterationDate() {
        return this.registerationDate;
    }

    public void setRegisterationDate(Date registerationDate) {
        this.registerationDate = registerationDate;
    }

    @Column(name = "phone", nullable = false, length = 25)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "address", nullable = false, length = 100)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "longitude", precision = 22, scale = 0)
    public Double getLongitude() {
        return this.longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    @Column(name = "latitude", precision = 22, scale = 0)
    public Double getLatitude() {
        return this.latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_has_role", catalog = "etbo5ly", joinColumns = {
        @JoinColumn(name = "user_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "role_id", nullable = false, updatable = false)})
    public Set<Role> getRoles() {
        return this.roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCookId")
    public Set<Order> getOrdersForCookId() {
        return this.ordersForCookId;
    }

    public void setOrdersForCookId(Set<Order> ordersForCookId) {
        this.ordersForCookId = ordersForCookId;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCustomerId")
    public Set<Order> getOrdersForCustomerId() {
        return this.ordersForCustomerId;
    }

    public void setOrdersForCustomerId(Set<Order> ordersForCustomerId) {
        this.ordersForCustomerId = ordersForCustomerId;
    }

}
