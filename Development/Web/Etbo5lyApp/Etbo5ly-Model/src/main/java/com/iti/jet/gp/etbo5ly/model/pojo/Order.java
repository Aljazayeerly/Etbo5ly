package com.iti.jet.gp.etbo5ly.model.pojo;
// Generated May 20, 2016 12:10:15 AM by Hibernate Tools 3.6.0

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * Order generated by hbm2java
 */
@NamedQueries({
    @NamedQuery(name = "getNonRated", query = "from Order o where o.userByCustomerId.id = :customerId and o.statusHasOrders.size= 3")
})
@Entity
@Table(name = "order", catalog = "etbo5ly"
)
public class Order implements java.io.Serializable {

    private Integer orderId;
    private User userByCustomerId;
    private Region region;
    private Timestamp orderTime;
    @JsonIgnore
    private User userByCookId;
    private String location;
    private int duration;
    private Short customerRating;
    private String orderComment;
    private Short cookRating;
    private String cookComment;
    private String type;
    private Double longitude;
    private Double latitude;
    private String addressDetails;
    private Float orderTotalPrice;
    @JsonIgnore
    private Set<OrderDetails> orderDetails = new HashSet<OrderDetails>(0);
    @JsonIgnore
    private Set<CateringDetails> cateringDetails = new HashSet<CateringDetails>(0);
    @JsonIgnore
    private Set<StatusHasOrder> statusHasOrders = new HashSet<StatusHasOrder>(0);

    public Order() {
    }

    public Order(User userByCustomerId, Region region, User userByCookId, String location, int duration) {
        this.userByCustomerId = userByCustomerId;
        this.region = region;
        this.userByCookId = userByCookId;
        this.location = location;
        this.duration = duration;
    }

    public Order(User userByCustomerId, Region region, User userByCookId, String location, int duration, Short customerRating, String orderComment, Short cookRating, String cookComment, String type, Double longitude, Double latitude, String addressDetails, Set<OrderDetails> orderDetails, Set<CateringDetails> cateringDetails, Set<StatusHasOrder> statusHasOrders) {
        this.userByCustomerId = userByCustomerId;
        this.region = region;
        this.userByCookId = userByCookId;
        this.location = location;
        this.duration = duration;
        this.customerRating = customerRating;
        this.orderComment = orderComment;
        this.cookRating = cookRating;
        this.cookComment = cookComment;
        this.type = type;
        this.longitude = longitude;
        this.latitude = latitude;
        this.addressDetails = addressDetails;
        this.orderDetails = orderDetails;
        this.cateringDetails = cateringDetails;
        this.statusHasOrders = statusHasOrders;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "order_id", unique = true, nullable = false)
    public Integer getOrderId() {
        return this.orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    @Column(name = "order_time", nullable = false, length = 100)
    public Timestamp getOrderTime() {
        return orderTime;
    }

    public void setOrderTime(Timestamp orderTime) {
        this.orderTime = orderTime;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", nullable = false)
    public User getUserByCustomerId() {
        return this.userByCustomerId;
    }

    public void setUserByCustomerId(User userByCustomerId) {
        this.userByCustomerId = userByCustomerId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "region_id", nullable = false)
    public Region getRegion() {
        return this.region;
    }

    public void setRegion(Region region) {
        this.region = region;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cook_id", nullable = false)
    public User getUserByCookId() {
        return this.userByCookId;
    }

    public void setUserByCookId(User userByCookId) {
        this.userByCookId = userByCookId;
    }

    @Column(name = "location", nullable = false, length = 100)
    public String getLocation() {
        return this.location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    @Column(name = "duration", nullable = false)
    public int getDuration() {
        return this.duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    @Column(name = "customer_rating")
    public Short getCustomerRating() {
        return this.customerRating;
    }

    public void setCustomerRating(Short customerRating) {
        this.customerRating = customerRating;
    }

    @Column(name = "order_comment", length = 150)
    public String getOrderComment() {
        return this.orderComment;
    }

    public void setOrderComment(String orderComment) {
        this.orderComment = orderComment;
    }

    @Column(name = "cook_rating")
    public Short getCookRating() {
        return this.cookRating;
    }

    public void setCookRating(Short cookRating) {
        this.cookRating = cookRating;
    }

    @Column(name = "cook_comment", length = 150)
    public String getCookComment() {
        return this.cookComment;
    }

    public void setCookComment(String cookComment) {
        this.cookComment = cookComment;
    }

    @Column(name = "type", length = 45)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Column(name = "longitude", precision = 22, scale = 0)
    public Double getLongitude() {
        return this.longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    @Column(name = "latitude", precision = 22, scale = 0)
    public Double getLatitude() {
        return this.latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    @Column(name = "address_details", length = 45)
    public String getAddressDetails() {
        return this.addressDetails;
    }

    public void setAddressDetails(String addressDetails) {
        this.addressDetails = addressDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "order")//,cascade = CascadeType.PERSIST)
    public Set<OrderDetails> getOrderDetails() {
        return this.orderDetails;
    }

    public void setOrderDetails(Set<OrderDetails> orderDetails) {
        this.orderDetails = orderDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
    public Set<CateringDetails> getCateringDetails() {
        return this.cateringDetails;
    }

    public void setCateringDetails(Set<CateringDetails> cateringDetails) {
        this.cateringDetails = cateringDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
    public Set<StatusHasOrder> getStatusHasOrders() {
        return this.statusHasOrders;
    }

    public void setStatusHasOrders(Set<StatusHasOrder> statusHasOrders) {
        this.statusHasOrders = statusHasOrders;
    }

    @Column(name = "total_price", nullable = false)
    public Float getOrderTotalPrice() {
        return orderTotalPrice;
    }

    public void setOrderTotalPrice(Float orderTotalPrice) {
        this.orderTotalPrice = orderTotalPrice;
    }

}
